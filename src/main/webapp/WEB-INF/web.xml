<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	<display-name>egov.sample</display-name>
    
    
   	<!-- 한글설정 필터 spring에서 제공되는 필터 클래스 UTF-8로 인코딩 해준다. <filter-name>: 등록할 필터의 이름을 지정 <filter-class>: 등록한 필터 클래스를 지정 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	
	
	<!-- <filter-name>: url과 매핑 시키고 싶은 필터의 이름을 지정 <url-pattern>: 매핑시키고싶은 url을 지정  -->
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>
    
    
    
    <!-- xss(Cross Site Scripting) 태그 필더 공격을 방어하기 위해서 강제 치환 -->
	<filter>
		<filter-name>HTMLTagFilter</filter-name>
		<filter-class>egovframework.rte.ptl.mvc.filter.HTMLTagFilter</filter-class>
	</filter>
	
	<!-- <filter-name>: url과 매핑 시키고 싶은 필터의 이름을 지정  <url-pattern>: 매핑시키고싶은 url을 지정  -->
	<filter-mapping>
		<filter-name>HTMLTagFilter</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>
	
	
	
    <!-- trigger 역할, web.xml에서 1순위로 읽는다.
    	ContextLoaderListener :  RootApplicationContext를 생성하는 클래스
    							 context-param 으로 등록된 정보들 중 contextConfigLocation을 읽어서 root-context에 등록
    							  만약 해당 contextConfigLocation 없으면 기본 동작으로 WEB-INF/applicationContext.xml을 읽는다. -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	
    <!-- web-inf의 classes 경로 의미 == 개발 디렉토리 구조상으로는 resources 경로 / resources/egovframework/spring/*.xml 들의 설정을 다 읽어드려서 설정으로 사용 
    	 만약 여기서 예외가 발생하게 되면 web.xml도 다 멈추고 실패 처리된다. 이로 설정들을 읽지를 못한다. -->
	<context-param>
		<!-- 스프링프레임 워크가 동작하기 위한 설정파일의 위치를 알려주는 파라미터 -->
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:egovframework/spring/context-*.xml</param-value>
	</context-param>    
        
    
    <!-- 스프링에서 제공하는 서블릿을 등록 -->
	<servlet>
		<servlet-name>action</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		
		<!-- init-param : servlet-context에 등록 -->
		<init-param>
			<!-- 스프링프레임 워크가 동작하기 위한 설정파일의 위치를 알려주는 파라미터 -->
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/config/egovframework/springmvc/dispatcher-servlet.xml</param-value>
		</init-param>
		
		<!-- 서블릿 순위 : 서블릿 사용여부와 관계 없이 바로 초기화 과정 실행
			  현재 servlet 등록 순서가 필요 없어서 굳이 사용할 이유는 없음
			  서버 올릴 때 요청 오기전에 dispatcher-servlet.xml에 예외 있으면 console에서 보여준다는 장점 정도는 가지고 있음 -->
 		<load-on-startup>1</load-on-startup>
	</servlet>
    
    
   	<!-- 특정 url 패턴으로 올 때 디스패처 서블릿이 동작하도록 서블릿을 매핑함
		*.do 인 경우는 동적요청이라 판단하여 was로 이동 이외 로직은 정적요청으로 판단 -->
	<servlet-mapping>
		<servlet-name>action</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
    
    
    
    
   	<!-- 세션의 유효 시간을 갖지 않을 경우, 한 번 생성된 세션 객체는 계속 메모리에 남아 있게 되어 메모리 부족 현상이 발생 
		  세션 유효 시간을 지정하여 사용하지 않는 세션은 제거해준다. web.xml에서 세션 timeout 시간은 분 단위 이다. -->
	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>
    
    
    
    
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
    
    
    
    <!-- 서블릿 보안 : 인증, 인가, 비밀 보장, 데이터 무결성 중 인증 방식을 web.xml에 작성 -->
	<login-config>
		<!-- BASIC : HTTP 표준     DIGEST : HTTP, J2EE   CLIENT-CERT : 사용자가 인증서를 갖고 있어야 함       FORM : 사용자 정의 로그인화면을 정해진 명칭으로 데이터 전송 -->
		<auth-method>BASIC</auth-method>
	</login-config>




	<!-- 상태 코드를 이용한 에러페이지 
		 사용자 정의 예외의 경우 400번대가 여러가지가 존재하지만 404와 같이 servlet-mapping에 지켜지지 않는 경우 404 에러를 발생
		 이외 사용자 정의 예외의 경우 dispatcherServlet 혹은 controller에서 다룰 수 있어서 개발자가 다루는 예외 페이지로 이동
		 따라서, 404를 제외한 사용자 정의 예외페이지는 따로 둘 필요가 없다고 판단 -->
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/jsp/views/errors/info.jsp</location>
	</error-page>


	<!-- 예외 타입별 에러페이지 설정 
		 was에서 서버쪽에서 컨트롤 하지 못하고 넘어온 예외의 경우 500으로 간주하여 <error-code>500</error-code>으로 관리가 가능
		 <exception-type>Exception</exception-type>으로 모든 예외를 다룰 수 있는 타입으로 지정하여 명확히 서버측 예외가 발생할 경우
		 해당 예외 페이지로 이동하도록 설정 -->
	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<location>/WEB-INF/jsp/views/errors/info.jsp</location>
	</error-page>
	

</web-app>
