<?xml version="1.0" encoding="UTF-8"?>
<Configuration>
    <Appenders>
         <Console name="console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d %5p [%c] %m%n" />
        </Console>
        
    </Appenders>

    <Loggers>

		<!-- Log Level  : TRACE -> DEBUG -> INFO -> WARN -> ERROR -> FATAL 
			 
			 Log 표출 범위 : 설정한 Level부터 상세 LEVEL까지 표출
			 
			 TRACE : 가장 상세한 로그 레벨, 애플리케이션의 실행 흐름과 디버깅 정보를 상세히 기록, 주로 디버깅 시에 사용
			 DEBUG : 디버깅 목적으로 사용되며, 개발 단계에서 상세한 정보를 기록, 애플리케이션의 내부 동작을 이해하고 문제를 분석하는 데 도움
			 INFO  : 정보성 메시지를 기록, 애플리케이션의 주요 이벤트나 실행 상태에 대한 정보를 전달
			 WARN  : 경고성 메시지를 기록, 예상치 못한 문제나 잠재적인 오류 상황을 알리는 메시지, 애플리케이션이 정상적으로 동작하지만 주의가 필요한 상황
			 ERROR : 오류 메시지를 기록, 심각한 문제 또는 예외 상황을 나타내며, 애플리케이션의 정상적인 동작에 영향을 미칠 수 있는 문제
			 FATAL : 가장 심각한 오류 메시지를 기록, 애플리케이션의 동작을 중단시킬 수 있는 치명적인 오류  -->


		<!-- framework Loggers -->

		<!-- org.springframework 패키지에 대한 로그 레벨을 INFO로 설정 -->
		<!-- additivity="false" : root 로그로 인한 로그가 중복으로 찍히는 것을 방지 -->
        <Logger name="org.springframework" level="INFO" additivity="false">
            <AppenderRef ref="console" />
        </Logger>
        
        <!-- egovframework 패키지에 대한 로그 레벨을 DEBUG로 설정 -->
         <Logger name="egovframework" level="INFO" additivity="false">
            <AppenderRef ref="console" />
        </Logger>
        
        
        <!-- JSON 관련 데이터 요청 응답 log 설정도 가능 -->
        
        
        <!-- SQL Logger -->
        
        <!--  열려있는 모든 번호와 연결 수립 및 해제 이벤트를 기록. 이는 연결 문제를 찾아내는데 매우 유용 (Connection Pool 설정) -->
     	<logger name="jdbc.connection" additivity="false">
			<level value="INFO" />
			<appender-ref ref="console"/> 
		</logger>
		
		<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남김, 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않음 -->
        <Logger name="jdbc.audit" level="INFO" additivity="false">
             <appender-ref ref="console"/>
         </Logger>
     
        <!-- 실행된 쿼리에 대한 resultSet 로깅 -->
         <Logger name="jdbc.resultset" level="INFO" additivity="false">
             <appender-ref ref="console"/>
         </Logger>
     	
		<!--      	
        <Logger name="java.sql" level="ERROR" additivity="false">
            <AppenderRef ref="console" />
        </Logger> -->
        
        <!-- SQL문만을 로그로 남김, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여짐 -->
        <Logger name="jdbc.sqlonly" level="DEBUG" additivity="false"> 
            <AppenderRef ref="console" /> 
        </Logger>
        
 		<!-- SQL 결과 조회된 데이터의 table을 로그로 남김 -->
        <Logger name="jdbc.resultSettable" level="INFO" additivity="false">
            <appender-ref ref="console"/>
        </Logger>

        <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함 -->
        <Logger name="jdbc.sqltiming" level="INFO" additivity="false">
            <AppenderRef ref="console" />
        </Logger>
        
        
        <!-- Root logger -->
        <Root level="INFO">
            <AppenderRef ref="console" />
        </Root>
        
    </Loggers>
</Configuration>
